/******************************************************************************
 *  Copyright (c) 2018, Xilinx, Inc.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its 
 *      contributors may be used to endorse or promote products derived from 
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
 
/*****************************************************************************
*
*     Author: Kristof Denolf <kristof@xilinx.com>
*     Date:   2018/01/22
*
*****************************************************************************/

///SDx temporal fix for Clang issue
#ifdef __SDSCC__
#undef __ARM_NEON__
#undef __ARM_NEON
#include <opencv2/core/core.hpp>
#define __ARM_NEON__
#define __ARM_NEON
#else
#include <opencv2/core/core.hpp>
#endif
//#include <opencv2/core/core.hpp>

#include "common/xf_common.h"
#include "features/xf_fast.hpp" 

#include <hls_video.h> 
#include "opencv2/features2d.hpp"
#include <opencv2/imgproc/imgproc.hpp> 
#include <opencv2/highgui/highgui.hpp>
#include <Utils/inc/UtilsForXfOpenCV.h>
#include "xfSDxFast.h"
 
void xF_fast(cv::Mat &image, std::vector<cv::KeyPoint> &keypoints, int threshold, bool nonmaxSuppression)
{
	const int NMSTP 		= ${NMSCMakeParam}; 	// non-maximum suppression	
	const int maxWidthTP 	= ${maxWidthCMakeParam};
	const int maxHeightTP 	= ${maxHeightCMakeParam};
	const int srcTypeTP 	= ${srcTypeCMakeParam};
	const int dstTypeTP 	= ${srcTypeCMakeParam}; 	
	const int NPCTP	 		= ${NPCCMakeParam};
	
	//check for limitations of xfOpenCV module
	//run-time
	assert(image.channels() == 1); 
	
	xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgInput;
	xf::Mat<dstTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgOutput;

	// perform some checks on the src type
	cvToXfSource(image,imgInput);
	          
	unsigned char thresholdHLS= (unsigned char) threshold;
	cv::Mat dst = cv::Mat::zeros(cv::Size(maxHeightTP,maxWidthTP), CV_8UC1);
		
	// perform some checks on the dst type
	bool dstPostConversion = cvToXfDestination(dst, imgOutput, image); 
	
	// call xf::FAST
	xf::fast<${NMSCMakeParam},${srcTypeCMakeParam},${maxHeightCMakeParam},${maxWidthCMakeParam},${NPCCMakeParam}>(*imgInput, *imgOutput, thresholdHLS);

	// locations of non-zero pixels
	std::vector<cv::Point> Locations; 
	
	// find list of keypoints in imgOutput
	cv::findNonZero(dst, Locations);
	  
	//copy points to keypoints
	for( int i=0; i< Locations.size(); i++){
    	keypoints.push_back(cv::KeyPoint(Locations[i], 1.f));
	}
	delete imgInput;
	delete imgOutput;
	
	return;
}
 
